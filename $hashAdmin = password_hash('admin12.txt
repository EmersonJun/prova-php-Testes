$hashAdmin = password_hash('admin123', PASSWORD_DEFAULT);
O que isso faz?
password_hash() é uma função nativa do PHP que:

gera um hash seguro da senha informada ('admin123')

usando o algoritmo bcrypt por padrão (seguro e recomendado).

O resultado é uma string longa, como:

perl
Copiar
Editar
$2y$10$wMop7BxsKzUeMl1qW5i1gePqjZL1fvIMV0z6wZ1Z5p7lOrS8zqE5u
Essa string é o hash da senha – não pode ser revertida para a senha original.

Onde isso é usado?
Na criação do banco de dados (arquivo criar-banco3), esse hash é inserido na tabela usuarios:

php
Copiar
Editar
INSERT IGNORE INTO usuarios (nome_usuario, senha) VALUES ('admin', '$hashAdmin')
E na hora do login?
Na função Usuario::authenticate():

php
Copiar
Editar
if (password_verify($password, $obj_usuario_resposta->senha)) {
    $_SESSION['user_id'] = $obj_usuario_resposta->id;
    ...
}
Aqui, o password_verify():

Compara a senha digitada pelo usuário ($password)

Com o hash salvo no banco ($obj_usuario_resposta->senha)

Ele não precisa saber a senha original – o PHP compara usando o algoritmo correto.

Por que isso é importante?
Mesmo que alguém roube seu banco de dados, não poderá ver as senhas reais.

Hashes são únicos para cada senha, mesmo iguais:

php
Copiar
Editar
echo password_hash("admin123", PASSWORD_DEFAULT);
echo password_hash("admin123", PASSWORD_DEFAULT);
Vai gerar dois valores diferentes por causa do salt (aleatoriedade interna).

